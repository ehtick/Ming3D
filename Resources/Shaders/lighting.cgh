vec4 calcLightingPhong(vec3 normal, vec3 worldPos, vec3 eyePos, vec3 lightDir, vec3 lightCol, vec4 baseCol, vec3 specularCol, float shininess)
{
    shininess = max(shininess, 0.0001f);

    vec3 n = normalize(normal);
    float ndotl = max(dot(n, lightDir * -1.0), 0.0);
    vec3 diffuse =  ndotl * (lightCol * baseCol.xyz);
    vec3 ambient = baseCol.xyz * 0.2; // TODO
    vec3 v = normalize(eyePos - worldPos);
    vec3 r = normalize(reflect(lightCol.xyz * -1.0, n));
    float rdotv = max( dot( r, v ), 0.0 );
    vec3 specular = pow(rdotv, shininess) * specularCol.xyz * baseCol.xyz;
    
#ifdef DEBUG_SPECULAR
    return vec4(specular.x, specular.y, specular.z, baseCol.a);
#else
    return vec4(diffuse.x + ambient.x + specular.x, diffuse.y + ambient.y + specular.y, diffuse.z + ambient.z + specular.z, baseCol.a);
#endif
}
