uniform mat4 MVP;
uniform mat4 modelMat;
uniform mat4 lightMat;

#ifdef use_mat_colour
    uniform vec4 _colourDiffuse;
#else
    uniform vec2 _textureTiling;
#endif

#ifndef unlit_mode
    uniform vec4 _colourSpecular;
    uniform float _shininess;
#endif


cbuffer _Globals
{
    vec3 _lightDir;
    vec4 _lightCol;
    vec3 _eyePos;
    float _time;
}

Texture2D mainTexture;
Texture2D depthTexture;

// Vertex shader input
struct VSInput
{
    vec4 Position : POSITION;
    vec3 Normal : NORMAL;
    vec2 TexCoord : TEXCOORD;
}

// Fragment shader input
struct FSInput
{
    vec4 Position : SV_POSITION;
    vec4 Normal : NORMAL;
    vec2 TexCoord : TEXCOORD;
    vec4 WorldPosition : POSITION;
    vec4 ShadowCoord : POSITION1;
}

// Vertex shader
shader VertexShader
{
    void main(VSInput input, FSInput output)
    {
        output.Position = MVP * input.Position;
        output.Normal = modelMat * vec4(input.Normal.x, input.Normal.y, input.Normal.z, 0.0);
        output.TexCoord = vec2(input.TexCoord.x * _textureTiling.x, input.TexCoord.y * _textureTiling.y);
        output.WorldPosition = modelMat * input.Position;
        output.ShadowCoord = lightMat * vec4(input.Position.x, input.Position.y, input.Position.z, 1.0);
    }
}

// Fragment shader
shader FragmentShader
{
    #include "Resources/Shaders/lighting.cgh"
    #include "Resources/Shaders/shadows.cgh"

    void main(FSInput input)
    {
        vec4 col = vec4(0.0, 0.0, 0.0, 0.0);
    #ifdef use_mat_colour
        col = _colourDiffuse;
    #else
        col = ReadTexture(mainTexture, input.TexCoord);
    #endif
        
    #ifndef unlit_mode
        col = calcLightingPhong(input.Normal.xyz, input.WorldPosition.xyz, _eyePos, _lightDir, _lightCol.xyz, col, _colourSpecular.xyz, _shininess);
    #endif
        
        col = applyShadows(col, input.ShadowCoord, input.Normal.xyz);        

        SetFragmentColour(col);
    }
}
