cmake_minimum_required(VERSION 3.3)
project(Engine)

find_package(assimp REQUIRED)

# Copy DLL from the given path to the EXE binary immediate directory (will be copied to output dir in the end)
function(copy_dlls bindir outdir dllnames)
    FOREACH(dllname ${dllnames})
    set(curr_dll ${bindir}/${dllname})
    if(EXISTS ${curr_dll})
        #add_custom_command(TARGET Engine POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${curr_dll}" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/debug/${dllname}")
        execute_process(COMMAND cmake -E copy ${curr_dll} ${outdir}/${dllname})
    else()
        message("File doesn't exist: ${curr_dll}")
    endif()
    ENDFOREACH()
endfunction()

# Link to a list of libraries
function(link_libs libdir libnames config)
    FOREACH(libname ${libnames})
        set(curr_lib ${libdir}/${libname})
        if(EXISTS ${curr_lib})
            target_link_libraries(Engine ${config} ${curr_lib})
        else()
            message("File doesn't exist: ${curr_lib}")
        endif()
    ENDFOREACH()
endfunction()

# Gather c++ files
file(GLOB_RECURSE SRC_FILES 
	Source/*.cpp
	Source/*.h
)

set(PHYSX_INC_DIR "${EXTERNAL_LIB_DIR}/physx/include")
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(VS_PLATFORM_NAME "x64")
        set(PHYSX_PLATFORM_NAME "64")
    else()
        set(VS_PLATFORM_NAME "x86")
        set(PHYSX_PLATFORM_NAME "32")
    endif()
    if(MSVC_VERSION GREATER_EQUAL 1920)
        set(VS_COMPILER_NAME "vc16")
    elseif(MSVC_VERSION GREATER_EQUAL 1910)
        set(VS_COMPILER_NAME "vc15")
    else()
        set(VS_COMPILER_NAME "vc14")
    endif()
    set(PHYSX_LIB_DIR "${EXTERNAL_LIB_DIR}/physx/lib/${VS_COMPILER_NAME}/${VS_PLATFORM_NAME}")
    set(PHYSX_BIN_DIR "${EXTERNAL_LIB_DIR}/physx/bin/${VS_COMPILER_NAME}/${VS_PLATFORM_NAME}")

    set(PHYSX_RELESE_BINS PhysX_${PHYSX_PLATFORM_NAME}.dll PhysXCommon_${PHYSX_PLATFORM_NAME}.dll PhysXFoundation_${PHYSX_PLATFORM_NAME}.dll)
    set(PHYSX_DEBUG_BINS PhysXCommon_${PHYSX_PLATFORM_NAME}.dll PhysX_${PHYSX_PLATFORM_NAME}.dll PhysXFoundation_${PHYSX_PLATFORM_NAME}.dll)
    set(PHYSX_RELESE_LIBS PhysX_${PHYSX_PLATFORM_NAME}.lib PhysXCommon_${PHYSX_PLATFORM_NAME}.lib PhysXExtensions_static_${PHYSX_PLATFORM_NAME}.lib PhysXFoundation_${PHYSX_PLATFORM_NAME}.lib)
    set(PHYSX_DEBUG_LIBS PhysXCommon_${PHYSX_PLATFORM_NAME}.lib PhysX_${PHYSX_PLATFORM_NAME}.lib PhysXExtensions_static_${PHYSX_PLATFORM_NAME}.lib PhysXFoundation_${PHYSX_PLATFORM_NAME}.lib)
endif()

include_directories ("Source")
include_directories (${PHYSX_INC_DIR})
include_directories (${SDL2_INCLUDE_DIRS})
include_directories (${assimp_INCLUDE_DIRS})
include_directories ("../Core/Source")
include_directories ("../Rendering/Source")
include_directories ("../Networking/Source")
include_directories ("../Include/glm")

add_library(Engine STATIC ${SRC_FILES})

target_link_libraries(Engine Rendering)
target_link_libraries(Engine Core)
target_link_libraries(Engine Networking)
target_link_libraries(Engine ${SDL2_LIBRARIES})
target_link_libraries(Engine ${assimp_LIBRARIES})

if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    if(MING3D_PHYSICS_API STREQUAL "PhysX")
        link_libs(${PHYSX_LIB_DIR}/release "${PHYSX_RELESE_LIBS}" optimized)
        link_libs(${PHYSX_LIB_DIR}/debug "${PHYSX_DEBUG_LIBS}" debug)

        copy_dlls(${PHYSX_BIN_DIR}/release ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/release "${PHYSX_RELESE_BINS}")
        copy_dlls(${PHYSX_BIN_DIR}/debug ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/debug "${PHYSX_DEBUG_BINS}")
    endif()
endif()
